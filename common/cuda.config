# C compiler
# CC ?= aarch64-none-linux-gnu-gcc
# CXX ?=  aarch64-none-linux-gnu-g++
# AR ?=aarch64-none-linux-gnu-ar
# CROSS_COMPILE ?=aarch64-none-linux-gnu-

CC ?= gcc
CXX ?= g++
AR ?= ar

CC_FLAGS =  -std=c++11 -g  -O2 -I$(STAGING_DIR)/usr/local/gdev/include -L$(STAGING_DIR)/usr/local/gdev/lib64  -L$(STAGING_DIR)/usr/lib/ -L$(STAGING_DIR)/lib/ -L$(STAGING_DIR)/lib64/ --sysroot $(STAGING_DIR)/ -I$(CUDA_DIR)/include
CCXFLAGS = $(CC_FLAGS)
CCFLAGS = $(CC_FLAGS)

CUDA_DIR =/usr/local/cuda-5.0/
NVCC = $(CUDA_DIR)/bin/nvcc
NVCC_FLAGS = -I$(CUDA_DIR)/include -I./ -cuda -ccbin=/usr/bin/gcc-4.4 -arch=sm_20

CC_LIBS=-lucuda -lgdev -lm -lstdc++

CC_LIB_DIRS=

ifeq ($(CROSS_COMPILE),)
$(info ************  NO CROSS COMPILE ************)
else
$(info ************ CROSS COMPILE $(CROSS_COMPILE) ************)
endif

# 'make dbg=1' enables NVCC debugging
ifeq ($(dbg),1)
	NVCC_FLAGS += -g -O0
else
	NVCC_FLAGS += -O2
endif

# 'make emu=1' compiles the CUDA kernels for emulation
ifeq ($(emu),1)
	NVCC_FLAGS += -deviceemu
endif